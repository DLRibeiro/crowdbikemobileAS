package br.ufpe.cin.contexto.crowdbikemobile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import at.abraxas.amarino.Amarino;
import br.ufpe.cin.br.adapter.crowdbikemobile.AsyncRegisterEntity;
import br.ufpe.cin.br.adapter.crowdbikemobile.Attributes;
import br.ufpe.cin.br.adapter.crowdbikemobile.Entity;
import br.ufpe.cin.contexto.crowdbikemobile.async.AsyncQueue;
import br.ufpe.cin.contexto.crowdbikemobile.async.AsyncSendNotification;
import br.ufpe.cin.contexto.crowdbikemobile.async.AsyncServidor;
import br.ufpe.cin.contexto.crowdbikemobile.async.AsyncTempo;
import br.ufpe.cin.contexto.crowdbikemobile.pojo.BikePosition;
import br.ufpe.cin.contexto.crowdbikemobile.pojo.MsgResponse;
import br.ufpe.cin.contexto.crowdbikemobile.pojo.Tempo;

import com.example.crowdbikemobile.R;
import com.google.gson.Gson;
import com.rabbitmq.client.ConnectionFactory;
import br.ufpe.cin.br.adapter.crowdbikemobile.AdapterOcurrence;

@SuppressLint("NewApi")
public class MainActivity extends Activity {

	private static final String DEVICE_ADDRESS = "30:14:11:03:21:35";
	private String latitudeString  = "";
	private String longitudeString = "";
	private Tempo tempoLocal = new Tempo();
	private int bgColor = 0;
	private SensorManager mSensorManager;
	private TextView txtMensagem;
	private String IMEI;
	private AsyncServidor task;
	private AsyncSendNotification task2;
	private AsyncTempo tempo;
	private boolean isGPSEnabled = true;
	private long startTime;
	private long stopTime;
	private long elapsedTime; 
	private TextView txtResultado;
	private long		timePosition;

	private String 		lastLatitudeString;
	private String 		lastLongitudeString;
	private long		timeLastPosition;

	private static final double EARTH_GRAVITY = 9.81;
	private static final double WEIGHT 		  = 70.0;
	private static final double GRADE 		  = 70.0;
	public  static final double W_TO_KGM	  = 6.12;
	public  static final double KGM_TO_KCAL   = 1 / 427.0;

	//Lumped constant for all frictional losses (tires, bearings, chain).
	private static final double K1 = 0.0053;

	//Lumped constant for aerodynamic drag (kg/m)
	private static final double K2 = 0.185;

	private static double totalCalorias = 0.0;
	
	private DoSomethingThread 	randomWork;
	
	private static final boolean IS_BIKE_MODULE = false;

    // The minimum distance to change Updates in meters
	private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 0; // 1 meters
	// The minimum time between updates in milliseconds
	private static final long MIN_TIME_BW_UPDATES = 0;//1000 * 60 * 1; // 1 minute
	
	private static final String PREFS_REGISTERED = "Preferences";

	private ConnectionFactory factory = new ConnectionFactory();
	
	private LocationManager mlocManager;
	private LocationListener mlocListener;
	
	private String returnQueue = "";
    
	private String registered ="";
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);
		txtMensagem = (TextView)findViewById(R.id.txtMensagem);
		IMEI = getIMEI(this);
		
		//Registra app no OrionCB
		//Restaura as preferencias gravadas
        SharedPreferences settings = getSharedPreferences(PREFS_REGISTERED, 0);
        registered =  settings.getString("Registered", "");
	    /*if (registered != "1") {
			//Chama a função de registrar ocorrencia
             AsyncRegisterEntity asyncRegisterEntity = new AsyncRegisterEntity(this);
             asyncRegisterEntity.execute(IMEI);
	    	 settings = getSharedPreferences(PREFS_REGISTERED, 0);
	         SharedPreferences.Editor editor = settings.edit();
	         editor.putString("Registered", "");
	         editor.putString("Registered", "1");
	         //Confirma a gravação dos dados
	         editor.commit();
		}*/
		
		//Conectando ao arduíno
		//Amarino.connect(this, DEVICE_ADDRESS);
		
		txtResultado = (TextView)findViewById(R.id.txtResultado);

		inicializarListenerGPS();

		
		//Toast.makeText(this, "O IMEI é: " + IMEI, Toast.LENGTH_LONG).show();

		//Setando a cor de fundo. Padrão: verde
		setarCorDeFundo(R.color.verde);
		
		//forecast
        tarefaParalelaTempo();
		
		//Executando tarefas paralelas
	 	tarefasParalelas();

		//Necessário para usar Runable na activity?
		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		StrictMode.setThreadPolicy(policy);
		
		
		setupConnectionFactory();		

		//setupPubButton();

		final Handler incomingMessageHandler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				String message = msg.getData().getString("msg");
				TextView tv = (TextView) findViewById(R.id.txtMensagem);
				Date now = new Date();
				SimpleDateFormat ft = new SimpleDateFormat ("hh:mm:ss");
				txtMensagem.setText(message);
				//tv.append(ft.format(now) + ' ' + message + '\n');
			}
		};
		
		 
	}

	@Override
	protected void onPause() {
		super.onPause();
		Amarino.disconnect(this, DEVICE_ADDRESS);
	}

	@Override
	protected void onResume() {
		super.onResume();
		Amarino.connect(this, DEVICE_ADDRESS);
		
	}
	
	Thread subscribeThread;
	Thread publishThread;
	@Override
	protected void onDestroy() {
		super.onDestroy();
		publishThread.interrupt();
		subscribeThread.interrupt();
		Amarino.disconnect(this, DEVICE_ADDRESS);
	}

	/**
	 * Este método seta a cor de fundo do aplicativo
	 * @param cor	Código inteiro da cor. A lista de cores disponíveis está em res/calues/colors.xml
	 */
	public void setarCorDeFundo(int intColor){
		setBgColor(intColor);

		String stringColor = getResources().getString(intColor);
		LinearLayout layoutApp = (LinearLayout)findViewById(R.id.backgroundApp);
		layoutApp.setBackgroundColor(Color.parseColor(stringColor));
	}	
	
	/*
	 * ########################################################################
	 * ########################################################################
	 *  Os seguintes métodos estão relacionados às requisições rest ao servidor
	 * ########################################################################
	 * ########################################################################
	 */
	
	
	private void startGenerating() {
		randomWork = new DoSomethingThread();
		randomWork.start();
	}

	private void stopGenerating() {
		randomWork.interrupt();
	}

	public void updateResults(String resultado) throws Exception {
		//xherman
		//retornoServidor(resultado);
		retornoServidorFiware(resultado);
	}

	public class DoSomethingThread extends Thread {

		private static final String TAG = "DoSomethingThread";
		private static final int DELAY = 1000; // 1 second

		@Override
		public void run() {
			Log.v(TAG, "doing work in Random Number Thread");

			while (true) {
				//xherman -- put here the function to call fiware service
				//publishProgress(requisicao()); //old
				try {
					publishProgress(fiwareRequest());
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				try {
					Thread.sleep(DELAY);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
			}
		}

		private void publishProgress(String param) {

			Log.v(TAG, "reporting back from the consumer message Thread");
			final String resultado = param;

			runOnUiThread(new Runnable() {

				@Override
				public void run() {
					updateResults(resultado);
				}
			});
		}
	}

	public String requisicao(){
		
		String result = "false";
		BikePosition posicao;
		String line;
		String resultado = "";
		
		startTime = System.currentTimeMillis();
		
		/*
		 * Esta linha deve ser modificada.
		 * Aqui deve ser informada a uri do serviço que recebe as coordenadas
		 * geográficas e retorna a situação do local: perigoso, seguro, ...
		 * 
		 */
		String uri = "";
		
		if(IS_BIKE_MODULE){
          uri = "http://" + getResources().getString(R.string.ip_host) + ":8080/project/rest/trace/";
			
		}else{
		  uri = "http://" + getResources().getString(R.string.ip_host) + ":8080/project/rest/vehicle/";
			
		}
		int responseCode = 0;

		try {
			HttpClient client = new DefaultHttpClient();
			HttpPost httppost = new HttpPost(uri);

			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();

			posicao = new BikePosition(IMEI, latitudeString, longitudeString);

			Gson gson = new Gson();

			//nameValuePairs.add(new BasicNameValuePair("latitude",  latitude ));
			//nameValuePairs.add(new BasicNameValuePair("longitude", longitude));

			//httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			httppost.setEntity(new StringEntity(gson.toJson(posicao)));

			int executeCount = 0;
			HttpResponse response;
			do {
				executeCount++;
				//Log.v("TENTATIVA", "tentativa número:" + executeCount);

				// Execute HTTP Post Request
				response = client.execute(httppost);
				responseCode = response.getStatusLine().getStatusCode();						

			} while (executeCount < 5 && responseCode == 408);

			BufferedReader rd = new BufferedReader(new InputStreamReader(
					response.getEntity().getContent()));

			while ((line = rd.readLine()) != null){
				result = line.trim();
			}

			//Neste ponto result já guarda o Json puro
			
			stopTime = System.currentTimeMillis();
		    elapsedTime = stopTime - startTime;
		    
		    Log.v("STATUS", elapsedTime + "ms");
		      
		} catch (Exception e) {
			Log.v("FALHA", "TASK");
			responseCode = 408;
			e.printStackTrace();
		}
		
		return result;

	}
	
	//xherman 
	public String fiwareRequest() throws Exception{
		
		Gson gson;
		String uri = "http://148.6.80.19:1026/v1/contextEntities";
		int responseCode = 0;
		String result = "";  
		String line = "";
		HttpClient client;

		try {
			client = new DefaultHttpClient();
			HttpGet httpget = new HttpGet(uri);
		    httpget.setHeader("Accept", "application/json");		
		    httpget.setHeader("Content-type", "application/json");
		    HttpResponse response;
			BufferedReader rd;

			int executeCount = 0;
			do {
				executeCount++;
				response = client.execute(httpget);
				responseCode = response.getStatusLine().getStatusCode();						
			} while (executeCount < 5 && responseCode == 408);
			      rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			while ((line = rd.readLine()) != null){
				result += line.trim();
			}	      
		} catch (Exception e) {
			responseCode = 408;
			e.printStackTrace();
		}
		
		return  result;
	}
	
  	/*
	 * ########################################################################
	 * ########################################################################
	 *  Os seguintes métodos estão relacionados às AsyncTasks e seus retornos
	 * ########################################################################
	 * ########################################################################
	 */
	/**
	 * Este método executa as tarefas paralelas para:
	 *  - Acesso ao servidor
	 *  - Receber informações de tempo
	 * @throws IOException 
	 */
	public void tarefasParalelas(){

	//	Toast.makeText(getApplicationContext(), "[TP] Sua localização é - \nLat: " + latitudeString + "\nLong: " + longitudeString, Toast.LENGTH_LONG).show();
		startGenerating();
		//serviço rest       
		//fila
        /*if (IS_BIKE_MODULE) {
        	try {
    			tarefaParalelaQueue();		
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
		}*/
      
	}
	
/*	public void tarefaParalelaServidor(){
		//Instanciando a asynctask para contato com o servidor e acesso ao arduíno
		task = new AsyncServidor(this);
		task.execute(IMEI, latitudeString, longitudeString);
	}
	*/
	public void tarefaParalelaServidor2(){
		//Instanciando a asynctask para contato com o servidor e acesso ao arduíno
		task2 = new AsyncSendNotification(this);
		task2.execute(IMEI, latitudeString, longitudeString);

	}
	
	public void tarefaParalelaTempo(){
		//Instanciando a asynktask para contato com o serviço de tempo
		tempo = new AsyncTempo(this);
		tempo.execute(latitudeString, longitudeString);
	}
	
	public void tarefaParalelaQueue() throws IOException{
		//AsyncQueue queue = new AsyncQueue(IMEI,HOST,"user","user","vhostuser"); 
		String uri 		   = getResources().getString(R.string.ip_host);
		String username    = getResources().getString(R.string.username);
		String senha       = getResources().getString(R.string.senha);
		String virtualHost = getResources().getString(R.string.vhost);
		
        AsyncQueue queue = new AsyncQueue(IMEI, uri, username, senha, virtualHost,this);   
		queue.execute("");
	}
	
	/**
	 * Este método recebe o retorno do servidor sobre o local atual
	 * Neste método será exibida a notificação do lugar na tela,
	 * a cor de background será setada
	 * 
	 * @param retorno	Resposta do servidor
	 */
	public void retornoServidor(String retorno){
	

		Gson gson = new Gson();
		MsgResponse respostaServidor = new MsgResponse(); 
       
		if(!retorno.equals("false") && !retorno.equals("") && !retorno.equals("OK")){
			respostaServidor = gson.fromJson(retorno, MsgResponse.class);
			//xherman
			if(respostaServidor.getDistance()!=null && Double.valueOf(respostaServidor.getDistance()) <= 30){
				txtMensagem.setText("rest: " + respostaServidor.getDistance());
				setarCorDeFundo(R.color.vermelho);
			}else{
				txtMensagem.setText("");
				setarCorDeFundo(R.color.verde); 
			}
			Log.v("DIST", respostaServidor.getDistance());
		}

	}
	
	//xherman
	public void retornoServidorFiware(String retorno) throws Exception{
		Gson gson = new Gson();
        String noValues = "{\"errorCode\" : {\"code\" : \"404\",\"reasonPhrase\" : \"No context element found\"}}";
		if(!retorno.equals(noValues) && !retorno.equals("")){
			String distance = getDistanceLocation(retorno);
			//xherman
			if(distance!=null && Double.valueOf(distance) <= 30){
				txtMensagem.setText("rest: " + distance);
				setarCorDeFundo(R.color.vermelho);
			}else{
				txtMensagem.setText("");
				setarCorDeFundo(R.color.verde); 
			}
			Log.v("DIST", distance);
		}

	}
	//xherman
	public String getDistanceLocation(String result) throws Exception{
		List<Entity> listEntity = AdapterOcurrence.parseListEntity(result);
		double minDistance = 0;
		double distance = 0;
		boolean isFirst = true;
		for (Entity entity : listEntity) {
			for (Attributes att : entity.getAttributes()) {
				if (att.getName().equalsIgnoreCase("GPSCoord")) {
						String[] tokensVal = att.getValue().split(",");
						distance = distance(tokensVal[0].trim(), tokensVal[1].trim(), latitudeString, longitudeString, 'M');
						   if (isFirst) {
						    	minDistance = distance;
						    	isFirst = false;
							}else{
								if (minDistance<distance) {
									minDistance = distance;
								}
							}
				}
			}
		}
		return String.valueOf(minDistance);
	}
	public void retornoFila(String retorno){
		returnQueue = retorno;
		Log.v("RETORNO =============>>> DISTANCIA:", retorno);
		if (Double.valueOf(retorno) <= 25) {
			sendInformationToArduino("1");	
		}else{
			sendInformationToArduino("0");	
		}
		
		/*this.runOnUiThread(new Runnable() 
		{
		    public void run() 
		    {
		        // Send Toast
		    	Toast.makeText(getApplicationContext(), "RETORNO =====>>> DISTÂNCIA: "+ returnQueue, Toast.LENGTH_LONG).show();
		    	
		    }
		});*/
	}
	
	/**
	 * Este método seta o atributo tempoMain.
	 * Este atributo armazena as informações de tempo
	 * 
	 * @param tempoMain	objeto Tempo setado com as informações coletadas do tempo
	 */
	public void setTempoMain(Tempo tempoMain) {
		this.tempoLocal = tempoMain;

		if(tempoMain.getTemperatura() != null){
			ImageView iconWeather = (ImageView)findViewById(R.id.iconWeather);
			TextView  txtTemp 	  = (TextView) findViewById(R.id.temperatura);
			TextView  txtDesc 	  = (TextView) findViewById(R.id.previsao);
			TextView  txtUom 	  = (TextView) findViewById(R.id.txt_uom_temp);

			Integer temperatura = Double.valueOf(tempoLocal.getTemperatura()).intValue();

			//Exibindo o ícone
			iconWeather.setBackgroundDrawable(getResources().getDrawable(tempoLocal.getIcone()));

			//Exibindo a temperatura
			txtTemp.setText(temperatura.toString());

			//Exibindo ºC
			txtUom.setText("ºC");

			//Exibindo a descrição
			txtDesc.setText(tempoLocal.getDescricao());
		}
	}
	
	/*
	 * ########################################################################
	 * ########################################################################
	 *            Os seguintes métodos estão relacionados ao Arduíno
	 * ########################################################################
	 * ########################################################################
	 */
	public void sendInformationToArduino(String informationText){
		String text = null;
		text = informationText;

		Amarino.sendDataToArduino(this, DEVICE_ADDRESS, 'A', text);
	//	Amarino.disconnect(this, DEVICE_ADDRESS);
	}


	
	/*
	 * ########################################################################
	 * ########################################################################
	 *        Os seguintes métodos estão relacionados à posição GPS
	 * ########################################################################
	 * ########################################################################
	 */
	public void inicializarListenerGPS(){
		
		/* Use the LocationManager class to obtain GPS locations */ 
		mlocManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE); 
		isGPSEnabled = mlocManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
		mlocListener = new MyLocationListener(this); 
		//-------------------------------
		/*Criteria criteria = new Criteria();
        criteria.setAltitudeRequired(false);
        criteria.setBearingRequired(false);
        criteria.setCostAllowed(false);
        criteria.setPowerRequirement(Criteria.POWER_LOW);       
         
        criteria.setAccuracy(Criteria.ACCURACY_FINE);
        String providerFine = mlocManager.getBestProvider(criteria, true);*/
    	//-------------------------------	
		mlocManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, mlocListener);
		Location location =  mlocManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		
		
		if(location!=null){		
			latitudeString  = String.valueOf(location.getLatitude());
			longitudeString = String.valueOf(location.getLongitude());		
		}else{
			
			mlocManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, mlocListener);
	 		location =  mlocManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
	 		
		     if(location!=null){
					latitudeString  = String.valueOf(location.getLatitude());
					longitudeString = String.valueOf(location.getLongitude());
				}
		}

	}

	public String getLatitudeString() {
		return latitudeString;
	}

	public String getLongitudeString() {
		return longitudeString;
	}


	/* Class My Location Listener */ 
	public class MyLocationListener implements LocationListener { 

		private Context lContexto;

		public MyLocationListener(Context contexto){
			this.lContexto = contexto;
		}

		@Override 
		public void onLocationChanged(Location loc) { 
			//Continue listening for a more accurate location
    	    loc.getLatitude(); 
			loc.getLongitude(); 
			
			 if(loc.getAccuracy() <= 10 && loc.getSpeed() <= 12){
		          //Do something
					//Atualizando as informações do app
				   ((MainActivity) lContexto).setLatitudeString(String.valueOf(loc.getLatitude()));
					((MainActivity) lContexto).setLongitudeString(String.valueOf(loc.getLongitude()));

					((MainActivity) lContexto).tarefasParalelas();
					
		     }
			//setando o momento da coordenada
				((MainActivity) lContexto).setTimePosition(System.currentTimeMillis());

				//calculandoa caloria do último percurso
				if(getLastLatitudeString() != null){
					if(getLastLongitudeString() != null){
						((MainActivity) lContexto).calcularCaloria();
					}
				}

				//setando a coordenada
				((MainActivity) lContexto).setLastLatitudeString (latitudeString);
				((MainActivity) lContexto).setLastLongitudeString(longitudeString);

				//setando o momento da coordenada
				((MainActivity) lContexto).setTimeLastPosition(timePosition);
			} 


		@Override 
		public void onProviderDisabled(String provider) { 
		} 

		@Override 
		public void onProviderEnabled(String provider) { 
		} 

		@Override 
		public void onStatusChanged(String provider, int status, Bundle extras) { 
		} 

	} 
	

	private void setupConnectionFactory(){

		String uri 		   = getResources().getString(R.string.ip_host);
		String username    = getResources().getString(R.string.username);
		String senha       = getResources().getString(R.string.senha);
		String virtualHost = getResources().getString(R.string.vhost);
		
		factory.setShutdownTimeout(5000);
		factory.setAutomaticRecoveryEnabled(false);	
		//factory.setTopologyRecoveryEnabled(true);
		
		factory.setHost(uri);
		factory.setPort(5672);
		factory.setVirtualHost(virtualHost);
		factory.setUsername(username);
		factory.setPassword(senha);
	}


	/**
	 * Este método recebe a resposta da chamada da ActivitySendNotification  
	 */
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if(requestCode == 30) {
			if(resultCode == Activity.RESULT_OK) {
				Toast.makeText(getApplicationContext(), "Retorno", Toast.LENGTH_LONG).show();
				setarCorDeFundo(R.color.vermelho);
			}
		}
	}

	/**
	 * Este método recupera o IMEI do aparelho
	 * @param context Contexto da aplaicação
	 * @return	String com o IMEI
	 */
	public String getIMEI(Context context){

		TelephonyManager mngr = (TelephonyManager) context.getSystemService(context.TELEPHONY_SERVICE); 
		String imei = mngr.getDeviceId();
		return imei;

	}

	public int getBgColor() {
		return bgColor;
	}

	public void setBgColor(int bgColor) {
		this.bgColor = bgColor;
	}
	
	public double calcularCaloria() {

		//Atualizando as informações do app
		/*
		private String 		latitudeString;
		private String 		longitudeString;
		private long		timePosition;

		private String 		lastLatitudeString;
		private String 		lastLongitudeString;
		private long		timeLastPosition; 
		 */

		double distance = distance(latitudeString, longitudeString, lastLatitudeString, lastLongitudeString, 'M');

		double durationSec = (timePosition - timeLastPosition) * (1/1000.0);
		double durationMin = durationSec * (1/1000.0) * (1/60.0);

		// Speed in m/s
		//double speed = (lastLocation.getSpeed() + newLocation.getSpeed()) / 2.0;
		double speed =  distance / durationSec;

		txtResultado.setText("Distância: " + distance + "\n Tempo: " + durationSec + "s \n " + speed + "m/s");

		// Duration in min
		//double duration = (double) (newLocation.getTime() - lastLocation.getTime()) * (1/1000.0) * (1/60.0);

		double power = EARTH_GRAVITY * WEIGHT * speed * (K1 + GRADE) + K2 * (speed * speed * speed);

		// WorkRate in kgm/min
		double workRate = power * W_TO_KGM;

		// VO2 in kgm/min/kg 1.8 = oxygen cost of producing 1 kgm/min of power
		// output. 7 = oxygen cost of unloaded cycling plus resting oxygen
		// consumption
		double vo2 = (1.8 * workRate / WEIGHT) + 7;

		// Calorie in kcal
		totalCalorias = totalCalorias + vo2 * durationMin * WEIGHT * KGM_TO_KCAL;;

		//Toast.makeText(this, "calorias: " + totalCalorias, Toast.LENGTH_LONG).show();

		//TextView txtCalorias = (TextView) findViewById(R.id.txtResultado);
		//txtCalorias.setText("Calorias:" + totalCalorias);
		txtResultado.setText(String.format( "%.4f", totalCalorias )+" Cal");

		return totalCalorias;
	} 

	/*
	public double calcularCaloria(Location newLocation) {
		// Speed in m/s
		double speed = (lastLocation.getSpeed() + newLocation.getSpeed()) / 2.0;

		// Duration in min
		double duration = (double) (newLocation.getTime() - lastLocation.getTime()) * (1/1000.0) * (1/60.0);

		double power = EARTH_GRAVITY * WEIGHT * speed * (K1 + GRADE) + K2 * (speed * speed * speed);

		// WorkRate in kgm/min
		double workRate = power * W_TO_KGM;


		// VO2 in kgm/min/kg 1.8 = oxygen cost of producing 1 kgm/min of power
		// output. 7 = oxygen cost of unloaded cycling plus resting oxygen
		// consumption
		double vo2 = (1.8 * workRate / WEIGHT) + 7;

		// Calorie in kcal
		totalCalorias = totalCalorias + vo2 * duration * WEIGHT * KGM_TO_KCAL;;

		Toast.makeText(this, "calorias: " + totalCalorias, Toast.LENGTH_LONG).show();

		TextView txtCalorias = (TextView) findViewById(R.id.txtCalorias);
		txtCalorias.setText("Calorias:" + totalCalorias);

		return totalCalorias;
	} 
	 */

	/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
	/*::  Esse método calcula a distância em K, M ou N                  :*/
	/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
	private double distance(String latitude1, String longitude1, String latitude2, String longitude2, char unit) {

		double lat1 = Double.valueOf(latitude1) .doubleValue();
		double lon1 = Double.valueOf(longitude1).doubleValue();
		double lat2 = Double.valueOf(latitude2) .doubleValue();
		double lon2 = Double.valueOf(longitude2).doubleValue();
		double dist = 0.0;
		double R = 6372.8; // In kilometers

		double dLat = Math.toRadians(lat2 - lat1);
		double dLon = Math.toRadians(lon2 - lon1);
		lat1 = Math.toRadians(lat1);
		lat2 = Math.toRadians(lat2);

		double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
		double c = 2 * Math.asin(Math.sqrt(a));
		
		dist = R * c;
		
		if (unit == 'K') {
			dist = dist * 1.609344;

		} else if (unit == 'N') {
			dist = dist * 0.8684;

		}else if(unit == 'M'){
			dist = dist * 1000.0;
		}
		return (dist);
	}

	/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
	/*::  This function converts decimal degrees to radians             :*/
	/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
	private double deg2rad(double deg) {
		return (deg * Math.PI / 180.0);
	}

	/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
	/*::  This function converts radians to decimal degrees             :*/
	/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
	private double rad2deg(double rad) {
		return (rad * 180.0 / Math.PI);
	}
	public void setLatitudeString(String latitudeString) {
		this.latitudeString = latitudeString;
	}

	public void setLongitudeString(String longitudeString) {
		this.longitudeString = longitudeString;
	}

	public void setTimePosition(long timePosition) {
		this.timePosition = timePosition;
	}

	public void setLastLatitudeString(String lastLatitudeString) {
		this.lastLatitudeString = lastLatitudeString;
	}

	public void setLastLongitudeString(String lastLongitudeString) {
		this.lastLongitudeString = lastLongitudeString;
	}

	public String getLastLatitudeString() {
		return lastLatitudeString;
	}

	public String getLastLongitudeString() {
		return lastLongitudeString;
	}

	public void setTimeLastPosition(long timeLastPosition) {
		this.timeLastPosition = timeLastPosition;
	}

}
