package com.software.project.cep.subscribe;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.software.project.amqp.MessageQueueManager;
import com.software.project.util.ApplicationContextProvider;

/**
 * Wraps Esper Statement and Listener. No dependency on Esper libraries.
 */
@Component
public class MonitorEventSubscriber implements StatementSubscriber {

    /** Logger */
    private static Logger LOG = LoggerFactory.getLogger(MonitorEventSubscriber.class);
    private  MessageQueueManager manager;
    /**
     * {@inheritDoc}
     */
    public String getStatement() {

      
         //   return "select avg(cast(BikePosition.lat, double)) as avg_val from BikePosition.win:time_batch(5 sec)";
    	 return "Select 6378137 * Math.sqrt(Math.pow((Math.toRadians(cast(Vehicle.lat, double)) - "+
		 "Math.toRadians(cast(BikePosition.lat, double))), 2) + Math.pow((Math.toRadians(cast(Vehicle.lng, double)) - "+
		 "Math.toRadians(cast(BikePosition.lng, double))), 2)) as distance, "+
		 "bikePosition.imei,bikePosition.lat,bikePosition.lng, "+
		 "Vehicle.imei,Vehicle.lat,Vehicle.lng "+
         "From BikePosition.win:length(1) as bikePosition, Vehicle order by distance asc limit 1 ";
    }

    /**
     * Listener method called when Esper has detected a pattern match.
     * @throws Exception 
     */
    public void update(Map<String, Double> eventMap) throws Exception {
        StringBuilder sb = new StringBuilder();
        sb.append("\n---------------------------------");
       // sb.append("\n- [MONITOR] latAvg = " + eventMap.get("avg_val"));
        sb.append("\n- [MONITOR] latVehicle = " + eventMap.get("Vehicle.lat"));
        sb.append("\n- [MONITOR] lngVehicle = " + eventMap.get("Vehicle.lng"));
        sb.append("\n- [MONITOR] latBike = " + eventMap.get("bikePosition.lat"));
        sb.append("\n- [MONITOR] lngBike = " + eventMap.get("bikePosition.lng"));
        sb.append("\n- [MONITOR] distance = " + eventMap.get("distance")); //distancia em metros
        sb.append("\n---------------------------------");
        LOG.debug(sb.toString());
            
       String imeiVehicle = String.valueOf(eventMap.get("Vehicle.imei"));
       String imeiBike = String.valueOf(eventMap.get("bikePosition.imei"));
       String distance = String.valueOf(eventMap.get("distance"));
       double d = Double.parseDouble(distance);
    
       
         manager = (MessageQueueManager) ApplicationContextProvider.getBean("messageQueueManager");
      // MessageQueueManager manager2 = (MessageQueueManager) ApplicationContextProvider.getBean("messageQueueManager");
         manager.createQueue(imeiBike);
	     manager.sendMessage(distance, imeiBike);
       
	     manager.createQueue(imeiVehicle);
	     manager.sendMessage(distance, imeiVehicle);
      
 
    }
}
